import { useState, useEffect, useRef } from 'react';

const MindMapVisualization = () => {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [selectedNode, setSelectedNode] = useState(null);
  const [zoom, setZoom] = useState(1);
  const [showAddNodeModal, setShowAddNodeModal] = useState(false);
  const [newNodeData, setNewNodeData] = useState({ title: '', parent: 'central', icon: '💡' });
  const canvasRef = useRef(null);

  const handleMouseMove = (e) => {
    setMousePosition({ x: e.clientX, y: e.clientY });
  };

  // Initial mind map data - now we can modify it
  const [mindMapData, setMindMapData] = useState({
  // Initial mind map data - now we can modify it
  const [mindMapData, setMindMapData] = useState({
    central: {
      id: 'central',
      title: 'Innovation Strategy',
      x: 50,
      y: 50,
      color: 'from-blue-600 to-purple-600',
      borderColor: 'border-blue-400',
      shadowColor: 'shadow-blue-500/50'
    },
    branches: [
      {
        id: 'tech',
        title: 'Technology',
        icon: '💻',
        x: 25,
        y: 20,
        color: 'from-cyan-600 to-blue-600',
        borderColor: 'border-cyan-400',
        shadowColor: 'shadow-cyan-500/40',
        subnodes: [
          { id: 'ai', title: 'AI & ML', x: 15, y: 10 },
          { id: 'cloud', title: 'Cloud Computing', x: 20, y: 5 },
          { id: 'blockchain', title: 'Blockchain', x: 10, y: 15 }
        ]
      },
      {
        id: 'market',
        title: 'Market Analysis',
        icon: '📊',
        x: 75,
        y: 20,
        color: 'from-purple-600 to-pink-600',
        borderColor: 'border-purple-400',
        shadowColor: 'shadow-purple-500/40',
        subnodes: [
          { id: 'trends', title: 'Market Trends', x: 85, y: 10 },
          { id: 'competitors', title: 'Competitors', x: 80, y: 5 },
          { id: 'demographics', title: 'Demographics', x: 90, y: 15 }
        ]
      },
      {
        id: 'product',
        title: 'Product Dev',
        icon: '🚀',
        x: 25,
        y: 80,
        color: 'from-green-600 to-emerald-600',
        borderColor: 'border-green-400',
        shadowColor: 'shadow-green-500/40',
        subnodes: [
          { id: 'design', title: 'UX Design', x: 15, y: 90 },
          { id: 'testing', title: 'Testing', x: 20, y: 95 },
          { id: 'iteration', title: 'Iteration', x: 10, y: 85 }
        ]
      },
      {
        id: 'growth',
        title: 'Growth Strategy',
        icon: '📈',
        x: 75,
        y: 80,
        color: 'from-orange-600 to-red-600',
        borderColor: 'border-orange-400',
        shadowColor: 'shadow-orange-500/40',
        subnodes: [
          { id: 'marketing', title: 'Marketing', x: 85, y: 90 },
          { id: 'sales', title: 'Sales', x: 80, y: 95 },
          { id: 'partnerships', title: 'Partnerships', x: 90, y: 85 }
        ]
      }
    ]
  });

  // Functions for mind map operations
  const createNewMindMap = () => {
    const title = prompt('Enter the central theme for your new mind map:', 'My Project');
    if (title) {
      setMindMapData({
        central: {
          id: 'central',
          title: title,
          x: 50,
          y: 50,
          color: 'from-blue-600 to-purple-600',
          borderColor: 'border-blue-400',
          shadowColor: 'shadow-blue-500/50'
        },
        branches: []
      });
      setSelectedNode(null);
      showNotification('✅ New mind map created!');
    }
  };

  const addBranch = () => {
    setShowAddNodeModal(true);
    setNewNodeData({ title: '', parent: 'central', icon: '💡', type: 'branch' });
  };

  const addSubNode = (parentBranchId) => {
    setShowAddNodeModal(true);
    setNewNodeData({ title: '', parent: parentBranchId, icon: '📌', type: 'subnode' });
  };

  const saveNewNode = () => {
    if (!newNodeData.title.trim()) {
      alert('Please enter a node title');
      return;
    }

    if (newNodeData.type === 'branch') {
      const colors = [
        { color: 'from-cyan-600 to-blue-600', border: 'border-cyan-400', shadow: 'shadow-cyan-500/40' },
        { color: 'from-purple-600 to-pink-600', border: 'border-purple-400', shadow: 'shadow-purple-500/40' },
        { color: 'from-green-600 to-emerald-600', border: 'border-green-400', shadow: 'shadow-green-500/40' },
        { color: 'from-orange-600 to-red-600', border: 'border-orange-400', shadow: 'shadow-orange-500/40' },
        { color: 'from-yellow-600 to-amber-600', border: 'border-yellow-400', shadow: 'shadow-yellow-500/40' },
        { color: 'from-rose-600 to-pink-600', border: 'border-rose-400', shadow: 'shadow-rose-500/40' }
      ];
      
      const colorScheme = colors[mindMapData.branches.length % colors.length];
      const angle = (mindMapData.branches.length * 360) / (mindMapData.branches.length + 1);
      const radius = 30;
      const x = 50 + radius * Math.cos((angle * Math.PI) / 180);
      const y = 50 + radius * Math.sin((angle * Math.PI) / 180);

      const newBranch = {
        id: `branch_${Date.now()}`,
        title: newNodeData.title,
        icon: newNodeData.icon,
        x: Math.max(10, Math.min(90, x)),
        y: Math.max(10, Math.min(90, y)),
        color: colorScheme.color,
        borderColor: colorScheme.border,
        shadowColor: colorScheme.shadow,
        subnodes: []
      };

      setMindMapData(prev => ({
        ...prev,
        branches: [...prev.branches, newBranch]
      }));
      showNotification('✅ Branch added successfully!');
    } else {
      // Add subnode
      const parentBranch = mindMapData.branches.find(b => b.id === newNodeData.parent);
      if (parentBranch) {
        const offsetX = (Math.random() - 0.5) * 20;
        const offsetY = (Math.random() - 0.5) * 20;
        
        const newSubnode = {
          id: `sub_${Date.now()}`,
          title: newNodeData.title,
          x: Math.max(5, Math.min(95, parentBranch.x + offsetX)),
          y: Math.max(5, Math.min(95, parentBranch.y + offsetY))
        };

        setMindMapData(prev => ({
          ...prev,
          branches: prev.branches.map(b => 
            b.id === newNodeData.parent 
              ? { ...b, subnodes: [...b.subnodes, newSubnode] }
              : b
          )
        }));
        showNotification('✅ Sub-node added successfully!');
      }
    }

    setShowAddNodeModal(false);
    setNewNodeData({ title: '', parent: 'central', icon: '💡' });
  };

  const deleteNode = (nodeId, isBranch = false) => {
    if (confirm('Are you sure you want to delete this node?')) {
      if (isBranch) {
        setMindMapData(prev => ({
          ...prev,
          branches: prev.branches.filter(b => b.id !== nodeId)
        }));
      } else {
        setMindMapData(prev => ({
          ...prev,
          branches: prev.branches.map(b => ({
            ...b,
            subnodes: b.subnodes.filter(s => s.id !== nodeId)
          }))
        }));
      }
      setSelectedNode(null);
      showNotification('🗑️ Node deleted!');
    }
  };

  const exportAsPNG = () => {
    showNotification('📸 Exporting as PNG... (Demo mode)');
    // In production, you would use html2canvas or similar
    setTimeout(() => {
      showNotification('✅ Export complete! (Demo)');
    }, 1000);
  };

  const shareMap = () => {
    const shareText = `Check out my ${mindMapData.central.title} mind map with ${mindMapData.branches.length} branches!`;
    if (navigator.share) {
      navigator.share({
        title: mindMapData.central.title,
        text: shareText
      });
    } else {
      navigator.clipboard.writeText(shareText);
      showNotification('🔗 Share link copied to clipboard!');
    }
  };

  const [notification, setNotification] = useState('');
  const showNotification = (msg) => {
    setNotification(msg);
    setTimeout(() => setNotification(''), 3000);
  };

  // Draw connections on canvas
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    const rect = canvas.getBoundingClientRect();
    canvas.width = rect.width * 2;
    canvas.height = rect.height * 2;
    ctx.scale(2, 2);

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const drawCurvedLine = (x1, y1, x2, y2, color, width = 2, glow = true) => {
      const midX = (x1 + x2) / 2;
      const midY = (y1 + y2) / 2;
      const controlX = midX;
      const controlY = midY - Math.abs(x2 - x1) * 0.15;

      if (glow) {
        ctx.shadowBlur = 15;
        ctx.shadowColor = color;
      }

      ctx.beginPath();
      ctx.moveTo(x1, y1);
      ctx.quadraticCurveTo(controlX, controlY, x2, y2);
      ctx.strokeStyle = color;
      ctx.lineWidth = width;
      ctx.stroke();

      ctx.shadowBlur = 0;
    };

    // Draw main branch connections
    mindMapData.branches.forEach(branch => {
      const x1 = (mindMapData.central.x / 100) * rect.width;
      const y1 = (mindMapData.central.y / 100) * rect.height;
      const x2 = (branch.x / 100) * rect.width;
      const y2 = (branch.y / 100) * rect.height;

      drawCurvedLine(x1, y1, x2, y2, 'rgba(96, 165, 250, 0.6)', 3);

      // Draw sub-node connections
      branch.subnodes.forEach(subnode => {
        const sx1 = x2;
        const sy1 = y2;
        const sx2 = (subnode.x / 100) * rect.width;
        const sy2 = (subnode.y / 100) * rect.height;

        drawCurvedLine(sx1, sy1, sx2, sy2, 'rgba(147, 197, 253, 0.4)', 1.5, false);
      });
    });
  }, []);

  const handleNodeClick = (node) => {
    setSelectedNode(node);
  };

  return (
    <div className="min-h-screen relative overflow-hidden" onMouseMove={handleMouseMove}>
      {/* Animated Gradient Background */}
      <div className="absolute inset-0 bg-black"></div>
      
      {/* Main Grid Lines - Subtle */}
      <div className="absolute inset-0 z-0" style={{
        backgroundImage: `
          linear-gradient(to right, rgba(59, 130, 246, 0.12) 1px, transparent 1px),
          linear-gradient(to bottom, rgba(59, 130, 246, 0.12) 1px, transparent 1px)
        `,
        backgroundSize: '60px 60px'
      }}></div>
      
      {/* Diagonal Grid Pattern */}
      <div className="absolute inset-0 z-0" style={{
        backgroundImage: `
          linear-gradient(45deg, rgba(96, 165, 250, 0.08) 1px, transparent 1px),
          linear-gradient(-45deg, rgba(96, 165, 250, 0.08) 1px, transparent 1px)
        `,
        backgroundSize: '40px 40px'
      }}></div>
      
      {/* Mouse Following Light Effect */}
      <div 
        className="absolute z-0 pointer-events-none"
        style={{
          left: mousePosition.x - 250,
          top: mousePosition.y - 250,
          width: '500px',
          height: '500px',
          background: `radial-gradient(circle, rgba(59, 130, 246, 0.18) 0%, rgba(96, 165, 250, 0.11) 20%, transparent 65%)`,
          filter: 'blur(45px)',
          transform: 'translate3d(0, 0, 0)',
          willChange: 'transform',
        }}
      ></div>
      
      {/* Kaleidoscope Radial Pattern - More Subtle */}
      <div className="absolute inset-0 opacity-15 z-0" style={{
        backgroundImage: `
          repeating-conic-gradient(
            from 0deg at 50% 50%,
            rgba(59, 130, 246, 0.15) 0deg,
            transparent 8deg,
            rgba(96, 165, 250, 0.12) 16deg,
            transparent 24deg,
            rgba(147, 197, 253, 0.1) 32deg,
            transparent 40deg,
            rgba(59, 130, 246, 0.15) 48deg
          )
        `,
        backgroundSize: '600px 600px',
        backgroundPosition: 'center center'
      }}></div>
      
      {/* Perspective Grid Effect - Subtle */}
      <div className="absolute inset-0 opacity-12 z-0" style={{
        backgroundImage: `
          linear-gradient(to right, rgba(59, 130, 246, 0.18) 2px, transparent 2px),
          linear-gradient(to bottom, rgba(59, 130, 246, 0.18) 2px, transparent 2px)
        `,
        backgroundSize: '80px 80px',
        transform: 'perspective(600px) rotateX(60deg)',
        transformOrigin: 'center bottom',
        minHeight: '200vh'
      }}></div>
      
      {/* Gradient Overlay */}
      <div className="absolute inset-0 bg-gradient-to-br from-blue-950/10 via-transparent to-blue-950/10 z-0"></div>
      
      {/* Content wrapper */}
      <div className="relative z-10">
        {/* Header */}
        <header className="backdrop-blur-md bg-black/50 border-b border-blue-500/30 sticky top-0 z-50">
          <div className="px-4 py-2">
            <div className="flex justify-between items-center">
              <div className="flex items-center gap-8 ml-2">
                <a href="/">
                  <img 
                    src="/logo.png" 
                    alt="Kaleidoscope Logo" 
                    className="h-16 w-auto object-contain drop-shadow-2xl"
                  />
                </a>
              </div>
              <a href="/" className="text-sm text-gray-300 hover:text-white transition-colors">← Back to Home</a>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <div className="container mx-auto px-6 py-12">
          <div className="max-w-6xl mx-auto">
            {/* Header */}
            <div className="text-center mb-8">
              <div className="text-6xl mb-4 animate-bounce">🧠</div>
              <h1 className="text-4xl md:text-5xl font-bold text-white mb-3 bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
                Innovation Mind Map
              </h1>
              <p className="text-base text-gray-400 max-w-2xl mx-auto">
                Explore the interconnected landscape of innovation strategy • Click nodes to reveal insights
              </p>
              <div className="flex items-center justify-center gap-4 mt-4">
                <div className="flex items-center gap-2 text-sm">
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                  <span className="text-gray-400">Live View</span>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <span className="text-gray-400">•</span>
                  <span className="text-blue-400 font-semibold">
                    {1 + mindMapData.branches.length + mindMapData.branches.reduce((acc, branch) => acc + branch.subnodes.length, 0)} Nodes
                  </span>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <span className="text-gray-400">•</span>
                  <span className="text-purple-400 font-semibold">{mindMapData.branches.length} Branches</span>
                </div>
              </div>
            </div>

            {/* Toolbar */}
            <div className="mb-6 bg-black/80 backdrop-blur-xl border border-blue-500/30 rounded-2xl p-4">
              <div className="flex flex-wrap gap-3 items-center justify-between">
                <div className="flex gap-2">
                  <button className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-5 py-2.5 rounded-lg text-sm font-semibold transition-all border border-blue-500/50 shadow-lg shadow-blue-500/30 flex items-center gap-2">
                    <span>🎯</span>
                    Focus View
                  </button>
                  <button className="bg-black/50 hover:bg-blue-500/20 text-gray-300 hover:text-white px-5 py-2.5 rounded-lg text-sm font-semibold transition-all border border-blue-500/30 flex items-center gap-2">
                    <span>🔍</span>
                    Zoom In
                  </button>
                  <button className="bg-black/50 hover:bg-blue-500/20 text-gray-300 hover:text-white px-5 py-2.5 rounded-lg text-sm font-semibold transition-all border border-blue-500/30 flex items-center gap-2">
                    <span>🔎</span>
                    Zoom Out
                  </button>
                </div>
                <div className="flex gap-2">
                  <button className="bg-black/50 hover:bg-blue-500/20 text-gray-300 hover:text-white px-5 py-2.5 rounded-lg text-sm font-semibold transition-all border border-blue-500/30 flex items-center gap-2">
                    <span>📸</span>
                    Export PNG
                  </button>
                  <button className="bg-black/50 hover:bg-purple-500/20 text-gray-300 hover:text-white px-5 py-2.5 rounded-lg text-sm font-semibold transition-all border border-purple-500/30 flex items-center gap-2">
                    <span>🔗</span>
                    Share
                  </button>
                </div>
              </div>
            </div>

            {/* Mind Map Canvas */}
            <div className="mb-6 bg-black/80 backdrop-blur-xl border border-blue-500/30 rounded-2xl p-4 overflow-hidden">
              <div className="relative w-full" style={{ height: '600px' }}>
                {/* Canvas for connections */}
                <canvas 
                  ref={canvasRef}
                  className="absolute inset-0 w-full h-full pointer-events-none"
                  style={{ zIndex: 1 }}
                />

                {/* Central Node */}
                <div 
                  className={`absolute transform -translate-x-1/2 -translate-y-1/2 cursor-pointer transition-all duration-300 hover:scale-110 z-10 ${
                    selectedNode?.id === 'central' ? 'scale-110' : ''
                  }`}
                  style={{ 
                    left: `${mindMapData.central.x}%`, 
                    top: `${mindMapData.central.y}%`,
                    zIndex: 10
                  }}
                  onClick={() => handleNodeClick(mindMapData.central)}
                >
                  <div className={`bg-gradient-to-br ${mindMapData.central.color} border-2 ${mindMapData.central.borderColor} rounded-2xl px-8 py-5 shadow-2xl ${mindMapData.central.shadowColor} relative overflow-hidden group`}>
                    {/* Animated glow effect */}
                    <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>
                    <div className="relative">
                      <div className="text-3xl mb-1 text-center">🎯</div>
                      <p className="text-white font-bold text-base text-center whitespace-nowrap">{mindMapData.central.title}</p>
                    </div>
                  </div>
                </div>

                {/* Branch Nodes */}
                {mindMapData.branches.map((branch, index) => (
                  <div key={branch.id}>
                    {/* Main Branch Node */}
                    <div 
                      className={`absolute transform -translate-x-1/2 -translate-y-1/2 cursor-pointer transition-all duration-500 hover:scale-110 z-10 ${
                        selectedNode?.id === branch.id ? 'scale-110' : ''
                      }`}
                      style={{ 
                        left: `${branch.x}%`, 
                        top: `${branch.y}%`,
                        animation: `float${index} 3s ease-in-out infinite`,
                        zIndex: 10
                      }}
                      onClick={() => handleNodeClick(branch)}
                    >
                      <div className={`bg-gradient-to-br ${branch.color} border-2 ${branch.borderColor} rounded-xl px-6 py-4 shadow-xl ${branch.shadowColor} relative overflow-hidden group`}>
                        <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
                        <div className="relative flex items-center gap-2">
                          <span className="text-2xl">{branch.icon}</span>
                          <p className="text-white font-semibold text-sm whitespace-nowrap">{branch.title}</p>
                        </div>
                        {/* Pulse ring */}
                        <div className="absolute inset-0 rounded-xl border-2 border-white/30 opacity-0 group-hover:opacity-100 group-hover:scale-110 transition-all duration-500"></div>
                      </div>
                    </div>

                    {/* Sub-nodes */}
                    {branch.subnodes.map((subnode, subIndex) => (
                      <div 
                        key={subnode.id}
                        className={`absolute transform -translate-x-1/2 -translate-y-1/2 cursor-pointer transition-all duration-300 hover:scale-105 ${
                          selectedNode?.id === subnode.id ? 'scale-105' : ''
                        }`}
                        style={{ 
                          left: `${subnode.x}%`, 
                          top: `${subnode.y}%`,
                          animation: `float${index}sub${subIndex} 4s ease-in-out infinite`,
                          animationDelay: `${subIndex * 0.2}s`,
                          zIndex: 5
                        }}
                        onClick={() => handleNodeClick(subnode)}
                      >
                        <div className="bg-gradient-to-br from-blue-500/40 to-purple-500/40 backdrop-blur-sm border border-blue-400/60 rounded-lg px-4 py-2 shadow-lg shadow-blue-500/20 relative overflow-hidden group">
                          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-500"></div>
                          <p className="text-white text-xs font-medium whitespace-nowrap relative">{subnode.title}</p>
                          {/* Sparkle effect on hover */}
                          <div className="absolute -top-1 -right-1 w-2 h-2 bg-blue-400 rounded-full opacity-0 group-hover:opacity-100 group-hover:animate-ping"></div>
                        </div>
                      </div>
                    ))}
                  </div>
                ))}

                {/* Decorative particles */}
                {[...Array(20)].map((_, i) => (
                  <div 
                    key={i}
                    className="absolute w-1 h-1 bg-blue-400/30 rounded-full"
                    style={{
                      left: `${Math.random() * 100}%`,
                      top: `${Math.random() * 100}%`,
                      animation: `pulse ${2 + Math.random() * 3}s ease-in-out infinite`,
                      animationDelay: `${Math.random() * 2}s`
                    }}
                  />
                ))}
              </div>
            </div>

            {/* Add CSS animations */}
            <style jsx>{`
              @keyframes float0 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px); }
                50% { transform: translate(-50%, -50%) translateY(-10px); }
              }
              @keyframes float1 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px); }
                50% { transform: translate(-50%, -50%) translateY(-12px); }
              }
              @keyframes float2 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px); }
                50% { transform: translate(-50%, -50%) translateY(-8px); }
              }
              @keyframes float3 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px); }
                50% { transform: translate(-50%, -50%) translateY(-11px); }
              }
              @keyframes float0sub0 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-6px) rotate(2deg); }
              }
              @keyframes float0sub1 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-5px) rotate(-2deg); }
              }
              @keyframes float0sub2 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-7px) rotate(1deg); }
              }
              @keyframes float1sub0 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-6px) rotate(-2deg); }
              }
              @keyframes float1sub1 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-5px) rotate(2deg); }
              }
              @keyframes float1sub2 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-7px) rotate(-1deg); }
              }
              @keyframes float2sub0 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-6px) rotate(1deg); }
              }
              @keyframes float2sub1 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-5px) rotate(-1deg); }
              }
              @keyframes float2sub2 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-7px) rotate(2deg); }
              }
              @keyframes float3sub0 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-6px) rotate(-1deg); }
              }
              @keyframes float3sub1 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-5px) rotate(1deg); }
              }
              @keyframes float3sub2 {
                0%, 100% { transform: translate(-50%, -50%) translateY(0px) rotate(0deg); }
                50% { transform: translate(-50%, -50%) translateY(-7px) rotate(-2deg); }
              }
              @keyframes pulse {
                0%, 100% { opacity: 0.3; transform: scale(1); }
                50% { opacity: 1; transform: scale(1.5); }
              }
            `}</style>

            {/* Node Details Panel */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-black/80 backdrop-blur-xl border border-blue-500/30 rounded-2xl p-6">
                <h3 className="text-white text-lg font-semibold mb-4 flex items-center gap-2">
                  <span className="text-2xl">✨</span>
                  Selected Node Details
                </h3>
                {selectedNode ? (
                  <div className="space-y-4">
                    <div className="bg-gradient-to-r from-blue-600/20 to-purple-600/20 border border-blue-500/30 rounded-xl p-4">
                      <div className="flex items-center gap-3 mb-3">
                        {selectedNode.icon && <span className="text-3xl">{selectedNode.icon}</span>}
                        <h4 className="text-white font-bold text-xl">{selectedNode.title}</h4>
                      </div>
                      <div className="space-y-2 text-sm">
                        <div className="flex items-center gap-2 text-gray-300">
                          <span className="text-blue-400">●</span>
                          <span>Type: {selectedNode.subnodes ? 'Main Branch' : selectedNode.id === 'central' ? 'Central Node' : 'Sub-node'}</span>
                        </div>
                        {selectedNode.subnodes && (
                          <div className="flex items-center gap-2 text-gray-300">
                            <span className="text-blue-400">●</span>
                            <span>Connected Nodes: {selectedNode.subnodes.length}</span>
                          </div>
                        )}
                        <div className="flex items-center gap-2 text-gray-300">
                          <span className="text-blue-400">●</span>
                          <span>Status: Active</span>
                        </div>
                      </div>
                    </div>
                    
                    {selectedNode.subnodes && (
                      <div>
                        <h5 className="text-gray-400 text-sm font-semibold mb-2">Connected Sub-nodes:</h5>
                        <div className="space-y-2">
                          {selectedNode.subnodes.map(sub => (
                            <div 
                              key={sub.id}
                              className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-2 hover:bg-blue-500/20 transition-colors cursor-pointer"
                              onClick={() => handleNodeClick(sub)}
                            >
                              <span className="text-white text-sm">{sub.title}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <div className="text-6xl mb-3 opacity-30">🎯</div>
                    <p className="text-gray-400 text-sm">Click on any node to view details</p>
                  </div>
                )}
              </div>

              <div className="bg-black/80 backdrop-blur-xl border border-blue-500/30 rounded-2xl p-6">
                <h3 className="text-white text-lg font-semibold mb-4 flex items-center gap-2">
                  <span className="text-2xl">📊</span>
                  Mind Map Overview
                </h3>
                <div className="space-y-3">
                  <div className="flex justify-between items-center pb-3 border-b border-blue-500/20">
                    <span className="text-gray-400 text-sm">Central Theme</span>
                    <span className="text-white font-semibold text-sm">{mindMapData.central.title}</span>
                  </div>
                  <div className="flex justify-between items-center pb-3 border-b border-blue-500/20">
                    <span className="text-gray-400 text-sm">Main Branches</span>
                    <span className="text-blue-400 font-bold text-lg">{mindMapData.branches.length}</span>
                  </div>
                  <div className="flex justify-between items-center pb-3 border-b border-blue-500/20">
                    <span className="text-gray-400 text-sm">Total Sub-nodes</span>
                    <span className="text-purple-400 font-bold text-lg">
                      {mindMapData.branches.reduce((acc, branch) => acc + branch.subnodes.length, 0)}
                    </span>
                  </div>
                  <div className="flex justify-between items-center pb-3 border-b border-blue-500/20">
                    <span className="text-gray-400 text-sm">Total Nodes</span>
                    <span className="text-green-400 font-bold text-lg">
                      {1 + mindMapData.branches.length + mindMapData.branches.reduce((acc, branch) => acc + branch.subnodes.length, 0)}
                    </span>
                  </div>
                  <div className="flex justify-between items-center pb-3 border-b border-blue-500/20">
                    <span className="text-gray-400 text-sm">Depth Levels</span>
                    <span className="text-orange-400 font-bold text-lg">3</span>
                  </div>
                  
                  <div className="pt-3">
                    <h4 className="text-gray-400 text-xs font-semibold mb-2">Branch Distribution:</h4>
                    <div className="space-y-2">
                      {mindMapData.branches.map(branch => (
                        <div key={branch.id} className="flex items-center gap-2">
                          <span className="text-lg">{branch.icon}</span>
                          <div className="flex-1 bg-black/50 rounded-full h-2 overflow-hidden">
                            <div 
                              className={`h-full bg-gradient-to-r ${branch.color} rounded-full transition-all duration-1000`}
                              style={{ width: `${(branch.subnodes.length / 12) * 100}%` }}
                            ></div>
                          </div>
                          <span className="text-white text-xs font-medium">{branch.subnodes.length}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Legend */}
            <div className="mt-6 bg-black/80 backdrop-blur-xl border border-blue-500/30 rounded-2xl p-6">
              <h3 className="text-white text-lg font-semibold mb-4 flex items-center gap-2">
                <span className="text-2xl">🎨</span>
                Node Color Legend
              </h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {mindMapData.branches.map(branch => (
                  <div key={branch.id} className="flex items-center gap-3">
                    <div className={`w-12 h-12 rounded-lg bg-gradient-to-br ${branch.color} border ${branch.borderColor} flex items-center justify-center shadow-lg ${branch.shadowColor}`}>
                      <span className="text-xl">{branch.icon}</span>
                    </div>
                    <div>
                      <p className="text-white font-medium text-sm">{branch.title}</p>
                      <p className="text-gray-400 text-xs">{branch.subnodes.length} nodes</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MindMapVisualization;
