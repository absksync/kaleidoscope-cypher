import { useState, useEffect, useRef } from 'react';

const MindMapVisualization = () => {
  const [selectedNode, setSelectedNode] = useState(null);
  const [zoom, setZoom] = useState(1);
  const [showAddCentralModal, setShowAddCentralModal] = useState(false);
  const [showAddBranchModal, setShowAddBranchModal] = useState(false);
  const [showAddSubnodeModal, setShowAddSubnodeModal] = useState(false);
  const [newNodeTitle, setNewNodeTitle] = useState('');
  const [newSubnodeTitle, setNewSubnodeTitle] = useState('');
  const [parentBranchId, setParentBranchId] = useState(null);
  const [panOffset, setPanOffset] = useState({ x: 0, y: 0 });
  const [isPanning, setIsPanning] = useState(false);
  const [panStart, setPanStart] = useState({ x: 0, y: 0 });
  const canvasRef = useRef(null);
  const containerRef = useRef(null);
  const [mindMapData, setMindMapData] = useState({ central: null, branches: [] });

  // Kaleidoscope theme color palette - matching website
  const branchColors = [
    { gradient: 'from-blue-500 to-blue-600', border: 'border-blue-400', text: 'text-blue-100', glow: 'shadow-blue-500/50' },
    { gradient: 'from-cyan-500 to-cyan-600', border: 'border-cyan-400', text: 'text-cyan-100', glow: 'shadow-cyan-500/50' },
    { gradient: 'from-indigo-500 to-indigo-600', border: 'border-indigo-400', text: 'text-indigo-100', glow: 'shadow-indigo-500/50' },
    { gradient: 'from-violet-500 to-violet-600', border: 'border-violet-400', text: 'text-violet-100', glow: 'shadow-violet-500/50' },
    { gradient: 'from-purple-500 to-purple-600', border: 'border-purple-400', text: 'text-purple-100', glow: 'shadow-purple-500/50' },
    { gradient: 'from-pink-500 to-pink-600', border: 'border-pink-400', text: 'text-pink-100', glow: 'shadow-pink-500/50' },
    { gradient: 'from-rose-500 to-rose-600', border: 'border-rose-400', text: 'text-rose-100', glow: 'shadow-rose-500/50' },
    { gradient: 'from-teal-500 to-teal-600', border: 'border-teal-400', text: 'text-teal-100', glow: 'shadow-teal-500/50' },
  ];  const handleCreateCentral = () => {
    if (!newNodeTitle.trim()) return;
    setMindMapData({ ...mindMapData, central: { id: 'central', title: newNodeTitle.trim(), x: 50, y: 50 } });
    setNewNodeTitle('');
    setShowAddCentralModal(false);
  };

  const handleAddBranch = () => {
    if (!newNodeTitle.trim() || !mindMapData.central) return;
    const branchCount = mindMapData.branches.length;
    const colorIndex = branchCount % branchColors.length;
    const angle = (branchCount * (360 / 8)) * (Math.PI / 180);
    const radius = 25;
    const newBranch = {
      id: `branch-${Date.now()}`,
      title: newNodeTitle.trim(),
      x: 50 + Math.cos(angle) * radius,
      y: 50 + Math.sin(angle) * radius,
      color: branchColors[colorIndex].gradient,
      borderColor: branchColors[colorIndex].border,
      textColor: branchColors[colorIndex].text,
      glow: branchColors[colorIndex].glow,
      subnodes: []
    };
    setMindMapData({ ...mindMapData, branches: [...mindMapData.branches, newBranch] });
    setNewNodeTitle('');
    setShowAddBranchModal(false);
  };

  const handleAddSubnode = () => {
    if (!newSubnodeTitle.trim() || !parentBranchId) return;
    const updatedBranches = mindMapData.branches.map(branch => {
      if (branch.id === parentBranchId) {
        const subnodeCount = branch.subnodes.length;
        const angle = ((subnodeCount * 60) - 30) * (Math.PI / 180);
        const branchAngle = Math.atan2(branch.y - 50, branch.x - 50);
        const radius = 15;
        const newSubnode = {
          id: `subnode-${Date.now()}`,
          title: newSubnodeTitle.trim(),
          x: branch.x + Math.cos(branchAngle + angle) * radius,
          y: branch.y + Math.sin(branchAngle + angle) * radius
        };
        return { ...branch, subnodes: [...branch.subnodes, newSubnode] };
      }
      return branch;
    });
    setMindMapData({ ...mindMapData, branches: updatedBranches });
    setNewSubnodeTitle('');
    setParentBranchId(null);
    setShowAddSubnodeModal(false);
  };

  const handleDeleteBranch = (branchId) => {
    setMindMapData({ ...mindMapData, branches: mindMapData.branches.filter(b => b.id !== branchId) });
    setSelectedNode(null);
  };

  const handleDeleteSubnode = (branchId, subnodeId) => {
    const updatedBranches = mindMapData.branches.map(branch => {
      if (branch.id === branchId) {
        return { ...branch, subnodes: branch.subnodes.filter(s => s.id !== subnodeId) };
      }
      return branch;
    });
    setMindMapData({ ...mindMapData, branches: updatedBranches });
  };

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas || !mindMapData.central) return;
    const ctx = canvas.getContext('2d');
    const rect = canvas.getBoundingClientRect();
    canvas.width = rect.width * 2;
    canvas.height = rect.height * 2;
    ctx.scale(2, 2);
    ctx.clearRect(0, 0, rect.width, rect.height);
    mindMapData.branches.forEach((branch) => {
      const centerX = (mindMapData.central.x / 100) * rect.width;
      const centerY = (mindMapData.central.y / 100) * rect.height;
      const branchX = (branch.x / 100) * rect.width;
      const branchY = (branch.y / 100) * rect.height;
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.lineTo(branchX, branchY);
      ctx.strokeStyle = 'rgba(100, 116, 139, 0.3)';
      ctx.lineWidth = 2;
      ctx.stroke();
      branch.subnodes.forEach((subnode) => {
        const subnodeX = (subnode.x / 100) * rect.width;
        const subnodeY = (subnode.y / 100) * rect.height;
        ctx.beginPath();
        ctx.moveTo(branchX, branchY);
        ctx.lineTo(subnodeX, subnodeY);
        ctx.strokeStyle = 'rgba(100, 116, 139, 0.2)';
        ctx.lineWidth = 1.5;
        ctx.stroke();
      });
    });
  }, [mindMapData, zoom]);

  const handleMouseDown = (e) => {
    if (e.target === containerRef.current || e.target === canvasRef.current) {
      setIsPanning(true);
      setPanStart({ x: e.clientX - panOffset.x, y: e.clientY - panOffset.y });
    }
  };

  const handleMouseMove = (e) => {
    if (isPanning) setPanOffset({ x: e.clientX - panStart.x, y: e.clientY - panStart.y });
  };

  const handleMouseUp = () => setIsPanning(false);

  const handleZoomIn = () => setZoom(Math.min(zoom + 0.1, 2));
  const handleZoomOut = () => setZoom(Math.max(zoom - 0.1, 0.5));
  const handleResetZoom = () => { setZoom(1); setPanOffset({ x: 0, y: 0 }); };

  const handleClearAll = () => {
    if (window.confirm('Are you sure you want to clear the entire mind map?')) {
      setMindMapData({ central: null, branches: [] });
      setSelectedNode(null);
    }
  };

  const handleExport = () => {
    const dataStr = JSON.stringify(mindMapData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'mindmap.json';
    link.click();
  };

  return (
    <div className="min-h-screen bg-black">
      {/* Animated background like landing page */}
      <div className="fixed inset-0 z-0">
        <div className="absolute inset-0 opacity-12" style={{
          backgroundImage: `
            linear-gradient(to right, rgba(59, 130, 246, 0.18) 2px, transparent 2px),
            linear-gradient(to bottom, rgba(59, 130, 246, 0.18) 2px, transparent 2px)
          `,
          backgroundSize: '80px 80px',
          transform: 'perspective(600px) rotateX(60deg)',
          transformOrigin: 'center bottom',
          minHeight: '200vh'
        }}></div>
        <div className="absolute inset-0 bg-gradient-to-br from-blue-950/10 via-transparent to-blue-950/10"></div>
      </div>

      {/* Content */}
      <div className="relative z-10">
        {/* Header with glassmorphism */}
        <header className="bg-black/50 backdrop-blur-md border-b border-blue-500/30 sticky top-0 z-50">
          <div className="px-6 py-4">
            <div className="flex justify-between items-center">
              <div className="flex items-center gap-4">
                <a href="/"><img src="/logo.png" alt="Kaleidoscope Logo" className="h-12 w-auto object-contain hover:scale-105 transition-transform"/></a>
                <div className="h-8 w-px bg-blue-500/30"></div>
                <h1 className="text-xl font-semibold text-white hover:text-transparent hover:bg-clip-text hover:bg-gradient-to-r hover:from-blue-400 hover:via-cyan-400 hover:to-blue-400 transition-all duration-300">Mind Map Builder</h1>
              </div>
              <a href="/" className="text-sm text-blue-400 hover:text-cyan-400 transition-colors flex items-center gap-2 group">
                <span className="group-hover:-translate-x-1 transition-transform">‚Üê</span> Back to Home
              </a>
            </div>
          </div>
        </header>
      <div className="flex h-[calc(100vh-73px)]">
        <div className="w-80 bg-black/30 backdrop-blur-sm border-r border-blue-500/30 p-6 overflow-y-auto">
          <div className="space-y-6">
            {!mindMapData.central && (
              <div className="bg-gradient-to-br from-blue-900/20 to-blue-950/20 border border-blue-500/30 rounded-xl p-4 hover:border-blue-500/50 transition-all">
                <h3 className="font-semibold text-blue-400 mb-2">Getting Started</h3>
                <p className="text-sm text-blue-200/70 mb-3">Create a central node to begin building your mind map.</p>
                <button onClick={() => setShowAddCentralModal(true)} className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-500 hover:to-cyan-500 text-white px-4 py-2.5 rounded-lg font-medium transition-all hover:scale-105 hover:shadow-lg hover:shadow-blue-500/50">Create Central Node</button>
              </div>
            )}
            {mindMapData.central && (<>
                <div>
                  <h3 className="text-sm font-semibold text-gray-900 mb-3">Add Nodes</h3>
                  <div className="space-y-2">
                    <button onClick={() => setShowAddBranchModal(true)} className="w-full bg-white hover:bg-gray-50 border border-gray-300 text-gray-700 px-4 py-2.5 rounded-lg font-medium transition-colors text-left flex items-center gap-2"><span className="text-lg">‚ûï</span>Add Main Branch</button>
                    {mindMapData.branches.length > 0 && (<button onClick={() => { if (selectedNode && selectedNode.type === 'branch') { setParentBranchId(selectedNode.id); setShowAddSubnodeModal(true); } else { alert('Please select a branch first by clicking on it'); } }} className="w-full bg-white hover:bg-gray-50 border border-gray-300 text-gray-700 px-4 py-2.5 rounded-lg font-medium transition-colors text-left flex items-center gap-2"><span className="text-lg">ÔøΩÔøΩ</span>Add Sub-node</button>)}
                  </div>
                </div>
                <div>
                  <h3 className="text-sm font-semibold text-gray-900 mb-3">View Controls</h3>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between bg-gray-50 p-3 rounded-lg">
                      <span className="text-sm text-gray-700">Zoom: {(zoom * 100).toFixed(0)}%</span>
                      <div className="flex gap-1">
                        <button onClick={handleZoomOut} className="px-3 py-1 bg-white border border-gray-300 rounded hover:bg-gray-50 text-gray-700 font-medium">‚àí</button>
                        <button onClick={handleZoomIn} className="px-3 py-1 bg-white border border-gray-300 rounded hover:bg-gray-50 text-gray-700 font-medium">+</button>
                      </div>
                    </div>
                    <button onClick={handleResetZoom} className="w-full bg-white hover:bg-gray-50 border border-gray-300 text-gray-700 px-4 py-2 rounded-lg font-medium transition-colors">Reset View</button>
                  </div>
                </div>
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="text-sm font-semibold text-gray-900 mb-3">Statistics</h3>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between"><span className="text-gray-600">Main Branches:</span><span className="font-semibold text-gray-900">{mindMapData.branches.length}</span></div>
                    <div className="flex justify-between"><span className="text-gray-600">Sub-nodes:</span><span className="font-semibold text-gray-900">{mindMapData.branches.reduce((sum, b) => sum + b.subnodes.length, 0)}</span></div>
                    <div className="flex justify-between"><span className="text-gray-600">Total Nodes:</span><span className="font-semibold text-gray-900">{1 + mindMapData.branches.length + mindMapData.branches.reduce((sum, b) => sum + b.subnodes.length, 0)}</span></div>
                  </div>
                </div>
                <div>
                  <h3 className="text-sm font-semibold text-gray-900 mb-3">Actions</h3>
                  <div className="space-y-2">
                    <button onClick={handleExport} className="w-full bg-white hover:bg-gray-50 border border-gray-300 text-gray-700 px-4 py-2 rounded-lg font-medium transition-colors flex items-center justify-center gap-2"><span>üíæ</span>Export as JSON</button>
                    <button onClick={handleClearAll} className="w-full bg-red-50 hover:bg-red-100 border border-red-200 text-red-700 px-4 py-2 rounded-lg font-medium transition-colors">Clear All</button>
                  </div>
                </div>
              </>
            )}
          </div>
        </div>
        <div ref={containerRef} className="flex-1 relative overflow-hidden bg-white cursor-move" onMouseDown={handleMouseDown} onMouseMove={handleMouseMove} onMouseUp={handleMouseUp} onMouseLeave={handleMouseUp}>
          <canvas ref={canvasRef} className="absolute inset-0 pointer-events-none" style={{ width: '100%', height: '100%', transform: `scale(${zoom}) translate(${panOffset.x / zoom}px, ${panOffset.y / zoom}px)`, transformOrigin: '0 0' }}/>
          <div className="absolute inset-0 pointer-events-none" style={{ transform: `scale(${zoom}) translate(${panOffset.x / zoom}px, ${panOffset.y / zoom}px)`, transformOrigin: '0 0' }}>
            {!mindMapData.central && (
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="text-center max-w-md">
                  <div className="text-6xl mb-4">üß†</div>
                  <h2 className="text-2xl font-semibold text-gray-900 mb-2">Create Your Mind Map</h2>
                  <p className="text-gray-600 mb-6">Start by creating a central node, then add branches and sub-nodes to organize your ideas visually.</p>
                  <button onClick={() => setShowAddCentralModal(true)} className="pointer-events-auto bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors inline-flex items-center gap-2"><span className="text-xl">+</span>Create Central Node</button>
                </div>
              </div>
            )}
            {mindMapData.central && (
              <div className="absolute pointer-events-auto" style={{ left: `${mindMapData.central.x}%`, top: `${mindMapData.central.y}%`, transform: 'translate(-50%, -50%)' }}>
                <div className={`bg-gradient-to-br from-gray-700 to-gray-800 text-white px-8 py-4 rounded-xl shadow-lg border-2 border-gray-500 cursor-pointer transition-all hover:shadow-xl ${selectedNode?.id === 'central' ? 'ring-4 ring-blue-400' : ''}`} onClick={() => setSelectedNode({ id: 'central', type: 'central' })}>
                  <div className="text-center font-semibold text-lg whitespace-nowrap">{mindMapData.central.title}</div>
                </div>
              </div>
            )}
            {mindMapData.branches.map((branch) => (
              <div key={branch.id}>
                <div className="absolute pointer-events-auto group" style={{ left: `${branch.x}%`, top: `${branch.y}%`, transform: 'translate(-50%, -50%)' }}>
                  <div className={`bg-gradient-to-br ${branch.color} ${branch.textColor} px-6 py-3 rounded-lg shadow-md border border-white/20 cursor-pointer transition-all hover:shadow-lg relative ${selectedNode?.id === branch.id ? 'ring-4 ring-blue-400' : ''}`} onClick={() => setSelectedNode({ id: branch.id, type: 'branch' })}>
                    <div className="font-medium whitespace-nowrap">{branch.title}</div>
                    {selectedNode?.id === branch.id && (<button onClick={(e) => { e.stopPropagation(); handleDeleteBranch(branch.id); }} className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 hover:bg-red-600 text-white rounded-full text-xs flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">√ó</button>)}
                  </div>
                </div>
                {branch.subnodes.map((subnode) => (
                  <div key={subnode.id} className="absolute pointer-events-auto group" style={{ left: `${subnode.x}%`, top: `${subnode.y}%`, transform: 'translate(-50%, -50%)' }}>
                    <div className="bg-white border border-gray-300 text-gray-700 px-4 py-2 rounded-md shadow-sm cursor-pointer transition-all hover:shadow-md hover:border-gray-400 relative" onClick={() => setSelectedNode({ id: subnode.id, type: 'subnode', branchId: branch.id })}>
                      <div className="text-sm whitespace-nowrap">{subnode.title}</div>
                      <button onClick={(e) => { e.stopPropagation(); handleDeleteSubnode(branch.id, subnode.id); }} className="absolute -top-1.5 -right-1.5 w-5 h-5 bg-red-500 hover:bg-red-600 text-white rounded-full text-xs flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">√ó</button>
                    </div>
                  </div>
                ))}
              </div>
            ))}
          </div>
          <div className="absolute bottom-4 right-4 text-xs text-gray-400 pointer-events-none">Drag to pan ‚Ä¢ Scroll to zoom</div>
        </div>
      </div>
      {showAddCentralModal && (<div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-6"><h3 className="text-xl font-semibold text-gray-900 mb-4">Create Central Node</h3><input type="text" value={newNodeTitle} onChange={(e) => setNewNodeTitle(e.target.value)} placeholder="Enter central topic..." className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-4" autoFocus onKeyPress={(e) => e.key === 'Enter' && handleCreateCentral()}/><div className="flex gap-3"><button onClick={() => { setShowAddCentralModal(false); setNewNodeTitle(''); }} className="flex-1 px-4 py-2.5 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg font-medium transition-colors">Cancel</button><button onClick={handleCreateCentral} disabled={!newNodeTitle.trim()} className="flex-1 px-4 py-2.5 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed">Create</button></div></div></div>)}
      {showAddBranchModal && (<div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-6"><h3 className="text-xl font-semibold text-gray-900 mb-4">Add Main Branch</h3><input type="text" value={newNodeTitle} onChange={(e) => setNewNodeTitle(e.target.value)} placeholder="Enter branch title..." className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-4" autoFocus onKeyPress={(e) => e.key === 'Enter' && handleAddBranch()}/><div className="flex gap-3"><button onClick={() => { setShowAddBranchModal(false); setNewNodeTitle(''); }} className="flex-1 px-4 py-2.5 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg font-medium transition-colors">Cancel</button><button onClick={handleAddBranch} disabled={!newNodeTitle.trim()} className="flex-1 px-4 py-2.5 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed">Add Branch</button></div></div></div>)}
      {showAddSubnodeModal && (<div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-6"><h3 className="text-xl font-semibold text-gray-900 mb-4">Add Sub-node</h3><p className="text-sm text-gray-600 mb-3">Adding to: <span className="font-semibold">{mindMapData.branches.find(b => b.id === parentBranchId)?.title}</span></p><input type="text" value={newSubnodeTitle} onChange={(e) => setNewSubnodeTitle(e.target.value)} placeholder="Enter sub-node title..." className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-4" autoFocus onKeyPress={(e) => e.key === 'Enter' && handleAddSubnode()}/><div className="flex gap-3"><button onClick={() => { setShowAddSubnodeModal(false); setNewSubnodeTitle(''); setParentBranchId(null); }} className="flex-1 px-4 py-2.5 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg font-medium transition-colors">Cancel</button><button onClick={handleAddSubnode} disabled={!newSubnodeTitle.trim()} className="flex-1 px-4 py-2.5 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed">Add Sub-node</button></div></div></div>)}
      </div>
    </div>
  );
};

export default MindMapVisualization;
